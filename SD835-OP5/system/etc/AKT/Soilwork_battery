#!/system/bin/sh

#BATTERY

#Original author: Alcolawl
#Original script By: RogerF81 + adanteon
#Settings By: RogerF81
#Device: OnePlus 5
#Codename: SoilWork UNIFIED
#SoC: Snapdragon 835
#Build Status: STABLE
#Version: 1.0
#Last Updated: 02/10/2017
#Credits: @Alcolawl @soniCron @Asiier @Freak07 @Mostafa Wael @Senthil360 @TotallyAnxious @Eliminater74 @RenderBroken @ZeroInfinity @Kyuubi10 @ivicask @RogerF81 @joshuous @boyd95 @ZeroKool76 @adanteon


codename=Soilwork
stype=balanced
version=V1.0

cdate=$(date)
DLL=/storage/emulated/0/soilwork_op3.txt

#Do not decrease sleep time
sleep 30

#Initializing log
echo "$cdate" > $DLL
echo "#####SOILWORK BALANCED####" >> $DLL
echo "*Searching CPU frequencies" >> $DLL

big_max_value=0
little_max_value=0
big_min_value=0
little_min_value=0

little_max_value=$(cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq);
big_max_value=$(cat /sys/devices/system/cpu/cpu4/cpufreq/cpuinfo_max_freq);
little_min_value=$(cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_min_freq);
big_min_value=$(cat /sys/devices/system/cpu/cpu4/cpufreq/cpuinfo_min_freq);

#Disable BCL
if [ -e "/sys/devices/soc/soc:qcom,bcl/mode" ]; then
	echo "*Disabling BCL" >> $DLL
	chmod 644 /sys/devices/soc/soc:qcom,bcl/mode
	echo -n disable > /sys/devices/soc/soc:qcom,bcl/mode
fi

#Starting perfd
if [ -e "/data/system/perfd" ]; then
	echo "*Starting perfd" >> $DLL
	start perfd
fi

#Turn on all cores
echo "*Turning on cores" >> $DLL
chmod 644 /sys/devices/system/cpu/online
echo 0-7 > /sys/devices/system/cpu/online
chmod 444 /sys/devices/system/cpu/online
echo 1 > /sys/devices/system/cpu/cpu0/online
echo 1 > /sys/devices/system/cpu/cpu1/online
echo 1 > /sys/devices/system/cpu/cpu2/online
echo 1 > /sys/devices/system/cpu/cpu4/online
echo 1 > /sys/devices/system/cpu/cpu5/online
echo 1 > /sys/devices/system/cpu/cpu6/online
echo 1 > /sys/devices/system/cpu/cpu7/online
chmod 664 /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq
chmod 664 /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq
chmod 664 /sys/devices/system/cpu/cpu4/cpufreq/scaling_max_freq
chmod 664 /sys/devices/system/cpu/cpu4/cpufreq/scaling_min_freq
echo $little_max_value > /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq
echo $little_min_value > /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq
echo $big_max_value > /sys/devices/system/cpu/cpu4/cpufreq/scaling_max_freq
echo $big_min_value > /sys/devices/system/cpu/cpu4/cpufreq/scaling_min_freq

#Apply settings to LITTLE cluster
echo "*Applying LITTLE settings" >> $DLL
echo "	+Searching available governors" >> $DLL

if [ -d /sys/devices/system/cpu/cpu0/cpufreq ]; then
	if [ -e /sys/devices/system/cpu/cpu0/cpufreq ]; then
		LGP=/sys/devices/system/cpu/cpu0/cpufreq
	fi

	AGL=/sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors;

	if grep 'schedutil' $AGL; then
		if [ -e $AGL ]; then
			echo "	+Applying & tuning schedutil" >> $DLL
			echo schedutil > $LGP/scaling_governor
			echo 0 > /dev/cpuset/background/cpus
			echo 0-5 > /dev/cpuset/foreground/cpus
			echo 0-7 > /dev/cpuset/foreground/boost/cpus
			echo 0-3 > /dev/cpuset/system-background/cpus
			echo 0-7 > /dev/cpuset/top-app/cpus
			chmod 664 /dev/stune/top-app/schedtune.boost
			echo 1 > /dev/stune/top-app/schedtune.boost
			echo 0 > /sys/module/cpu_boost/parameters/dynamic_stune_boost
			echo 0 > /dev/stune/top-app/schedtune.prefer_idle
			echo 0 > /dev/stune/background/schedtune.boost
			echo 0 > /dev/stune/background/schedtune.prefer_idle
			echo 0 > /dev/stune/foreground/schedtune.boost
			echo 0 > /dev/stune/foreground/schedtune.prefer_idle
			echo 32 > /proc/sys/kernel/sched_nr_migrate
			echo 0 > /dev/stune/schedtune.prefer_idle
			echo 0 > /proc/sys/kernel/sched_child_runs_first
			echo 1 > /proc/sys/kernel/sched_cstate_aware
			echo 0 > /proc/sys/kernel/sched_initial_task_util
			echo 100 > /proc/sys/kernel/sched_rr_timeslice_ms
			echo 2000 > $LGP/schedutil/up_rate_limit_us
			echo 3000 > $LGP/schedutil/down_rate_limit_us
			if [ -e "/proc/sys/kernel/sched_autogroup_enabled" ]; then
				echo 0 > /proc/sys/kernel/sched_autogroup_enabled
			fi
			if [ -e "/proc/sys/kernel/sched_is_big_little" ]; then
				echo 1 > /proc/sys/kernel/sched_is_big_little
			fi
			if [ -e "/proc/sys/kernel/sched_boost" ]; then
				echo 0 > /proc/sys/kernel/sched_boost
			fi
			if [ -e "/proc/sys/kernel/sched_use_walt_task_util" ]; then
				echo 0 > /proc/sys/kernel/sched_use_walt_task_util
				echo 0 > /proc/sys/kernel/sched_use_walt_cpu_util
				echo 0 > /proc/sys/kernel/sched_walt_init_task_load_pct
				echo 0 > /proc/sys/kernel/sched_walt_cpu_high_irqload
			fi
			if [ -e "/proc/sys/kernel/sched_latency_ns" ]; then
				echo 5000000 > /proc/sys/kernel/sched_latency_ns
			fi
			if [ -e "/proc/sys/kernel/sched_wakeup_granularity_ns" ]; then
				echo 1000000 > /proc/sys/kernel/sched_wakeup_granularity_ns
			fi
			if [ -e "/proc/sys/kernel/sched_min_granularity_ns" ]; then
				echo 1000000 > /proc/sys/kernel/sched_min_granularity_ns
			fi
		fi
		echo "	+Tuning finished for schedutil" >> $DLL
	elif grep 'interactive' $AGL; then
		if [ -e $AGL ]; then
			echo "	+Applying & tuning interactive" >> $DLL
			echo interactive > $LGP/scaling_governor
			# echo 70 460000:70 600000:75 768000:80 960000:88 1056800:99 1248000:99 > $LGP/interactive/target_loads
			# echo 150000 > $LGP/interactive/timer_slack
			# chmod 644 $LGP/interactive/timer_rate
			# echo 86500 > $LGP/interactive/timer_rate
			# echo 307200 > $LGP/interactive/hispeed_freq
			# echo 60000 768000:80000 960000:55000 1440000:45000 > $LGP/interactive/above_hispeed_delay
			echo 180 > $LGP/interactive/go_hispeed_load
			echo 24000 > $LGP/interactive/min_sample_time
			echo 0 > $LGP/interactive/max_freq_hysteresis
			echo 1 > $LGP/interactive/ignore_hispeed_on_notif
			echo 0 > $LGP/interactive/boost
			echo 1 > $LGP/interactive/fast_ramp_down
			echo 0 > $LGP/interactive/align_windows
			echo 1 > $LGP/interactive/use_migration_notif
			echo 0 > $LGP/interactive/use_sched_load
			echo 0 > $LGP/interactive/boostpulse_duration
			echo 0 > $LGP/interactive/io_is_busy
			echo 0 > $LGP/interactive/enable_prediction
			echo 60 > /proc/sys/kernel/sched_upmigrate
			echo 25 > /proc/sys/kernel/sched_downmigrate
			echo 15 > /proc/sys/kernel/sched_small_wakee_task_load
			echo 0 > /proc/sys/kernel/sched_init_task_load
			echo 35 > /proc/sys/kernel/sched_big_waker_task_load
			echo 3 > /proc/sys/kernel/sched_window_stats_policy
			echo 4 > /proc/sys/kernel/sched_ravg_hist_size
			echo 0 > /proc/sys/kernel/sched_upmigrate_min_nice
			echo 3 > /proc/sys/kernel/sched_spill_nr_run
			echo 70 > /proc/sys/kernel/sched_spill_load
			echo 1 > /proc/sys/kernel/sched_enable_thread_grouping
			echo 1 > /proc/sys/kernel/sched_restrict_cluster_spill
			echo 110 > /proc/sys/kernel/sched_wakeup_load_threshold
			echo 10 > /proc/sys/kernel/sched_rr_timeslice_ms
			echo 950000 > /proc/sys/kernel/sched_rt_runtime_us
			echo 1000000 > /proc/sys/kernel/sched_rt_period_us
			if [ -e "/proc/sys/kernel/sched_heavy_task" ]; then
				echo 65 > /proc/sys/kernel/sched_heavy_task
			fi
			if [ -e "/proc/sys/kernel/sched_enable_power_aware" ]; then
				echo 1 > /proc/sys/kernel/sched_enable_power_aware
			fi
			if [ -e "/proc/sys/kernel/sched_small_task" ]; then
				echo 10 > /proc/sys/kernel/sched_small_task
			fi
			if [ -e "/proc/sys/kernel/sched_migration_fixup" ]; then
				echo 1 > /proc/sys/kernel/sched_migration_fixup
			fi
			if [ -e "/proc/sys/kernel/sched_freq_dec_notify" ]; then
				echo 410000 > /proc/sys/kernel/sched_freq_dec_notify
			fi
			if [ -e "/proc/sys/kernel/sched_freq_inc_notify" ]; then
				echo 610000 > /proc/sys/kernel/sched_freq_inc_notify
			fi
			if [ -e "/proc/sys/kernel/sched_boost" ]; then
				echo 0 > /proc/sys/kernel/sched_boost
			fi
			if [ -e "/sys/devices/system/cpu/cpu0/cpufreq/interactive/screen_off_maxfreq" ]; then
				echo 384000 > $LGP/interactive/screen_off_maxfreq
			fi
			if [ -e "/sys/devices/system/cpu/cpu0/cpufreq/interactive/powersave_bias" ]; then
				echo 1 > $LGP/interactive/powersave_bias
			fi
			echo "	+Tuning finished for interactive" >> $DLL
		fi
	else
		echo "	-The governor's path is wrong or mod is incompatible" >> $DLL
		echo "	-Error Code #01" >> $DLL
	fi
fi

echo "	*LITTLE settings finished" >> $DLL

#Apply settings to big cluster
echo "*Applying big settings" >> $DLL
echo "	+Searching available governors" >> $DLL

if [ -d /sys/devices/system/cpu/cpu4/cpufreq ]; then
	if [ -e /sys/devices/system/cpu/cpu4/cpufreq ]; then
		BGP=/sys/devices/system/cpu/cpu4/cpufreq
	fi

	AGB=/sys/devices/system/cpu/cpu4/cpufreq/scaling_available_governors;

	if grep 'schedutil' $AGB; then
		if [ -e $AGB ]; then
			echo "	+Applying schedutil" >> $DLL
			echo schedutil > $BGP/scaling_governor
			echo 4000 > $BGP/schedutil/up_rate_limit_us
			echo 3000 > $BGP/schedutil/down_rate_limit_us
		fi
		echo "	+Tuning finished for schedutil" >> $DLL
	elif grep 'interactive' $AGB; then
		if [ -e $AGB ]; then
			echo "	Applying & tuning interactive" >> $DLL
			echo interactive > $BGP/scaling_governor
			# echo 65 460000:68 768000:75 902400:80 1056800:96 1440000:97 1824000:99 > $BGP/interactive/target_loads
			# echo 170000 > $BGP/interactive/timer_slack
			# echo 691200 > $BGP/interactive/hispeed_freq
			# chmod 644 $BGP/interactive/timer_rate
			# echo 965000 > $BGP/interactive/timer_rate
			# echo 50000 902400:200000 1286400:175000 1440000:80000 1670400:80000 > $BGP/interactive/above_hispeed_delay
			echo 350 > $BGP/interactive/go_hispeed_load
			echo 24000 > $BGP/interactive/min_sample_time		
			echo 0 > $BGP/interactive/max_freq_hysteresis
			echo 1 > $BGP/interactive/ignore_hispeed_on_notif
			echo 0 > $BGP/interactive/boost
			echo 0 > $BGP/interactive/fast_ramp_down
			echo 0 > $BGP/interactive/align_windows
			echo 1 > $BGP/interactive/use_migration_notif
			echo 1 > $BGP/interactive/use_sched_load
			echo 0 > $BGP/interactive/boostpulse_duration
			echo 0 > $BGP/interactive/io_is_busy
			echo 0 > $BGP/interactive/enable_prediction	
			echo "	+Tuning finished for interactive" >> $DLL
		fi
	else
		echo "	-The governor's path is wrong or mod is incompatible" >> $DLL
		echo "	-Error Code #02" >> $DLL
	fi
fi

echo "	*big settings finished" >> $DLL

#Enable work queue to be power efficient
if [ -e /sys/module/workqueue/parameters/power_efficient ]; then
	echo "*Enabling power saving work queue" >> $DLL
	chmod 644 /sys/module/workqueue/parameters/power_efficient
	echo Y > /sys/module/workqueue/parameters/power_efficient
	chmod 444 /sys/module/workqueue/parameters/power_efficient
fi

# #Tweak VoxPopuli -- Only on EAS kernels
# if [ -d /dev/voxpopuli/ ]; then
	# echo "*Tweaking Vox Populi PowerHal" >> $DLL
	# VOX_P=/dev/voxpopuli/
	# echo 1 > $VOX_P/enable_interaction_boost	#Main switch
	# echo 0 > $VOX_P/fling_min_boost_duration
	# echo 2500 > $VOX_P/fling_max_boost_duration
	# echo 10 > $VOX_P/fling_boost_topapp
	# echo 940 > $VOX_P/fling_min_freq_big	
	# echo 960 > $VOX_P/fling_min_freq_little
	# echo 200 > $VOX_P/touch_boost_duration
	# echo 5 > $VOX_P/touch_boost_topapp
	# echo 806 > $VOX_P/touch_min_freq_big
	# echo 960 > $VOX_P/touch_min_freq_little
# fi

# #Tweak input boost -- Only Sultanized ROMs
# if [ -e "/sys/kernel/cpu_input_boost" ]; then
	# echo "*Tweaking input boost" >> $dll
	# chmod 644 /sys/kernel/cpu_input_boost/*
	# echo 1 > /sys/kernel/cpu_input_boost/enable
	# echo 66 > /sys/kernel/cpu_input_boost/ib_duration_ms
	# echo 537600 537600 > /sys/kernel/cpu_input_boost/ib_freqs
	# chmod 444 /sys/kernel/cpu_input_boost/*
# fi

# #Tweak cpu boost -- Only LOS ROMs
# if [ -e "/sys/module/cpu_boost" ]; then
	# echo "*Tweaking CPU Boost" >> $DLL
	# #chmod 644 /sys/module/cpu_boost/parameters/sched_boost_on_input
	# #echo Y > /sys/module/cpu_boost/parameters/sched_boost_on_input
	# chmod 644 /sys/module/cpu_boost/parameters/input_boost_freq
	# echo 0:537600 1:0 2:537600 3:0 > /sys/module/cpu_boost/parameters/input_boost_freq
	# chmod 644 /sys/module/cpu_boost/parameters/input_boost_ms
	# echo 66 > /sys/module/cpu_boost/parameters/input_boost_ms
	# if [ -e "/sys/module/cpu_boost/parameters/boost_ms" ]; then
		# chmod 644 /sys/module/cpu_boost/parameters/boost_ms
		# echo 0 > /sys/module/cpu_boost/parameters/boost_ms
	# fi
# fi

#Disable TouchBoost	-- HMP only
if [ -e "/sys/module/msm_performance/parameters/touchboost" ]; then
	echo "*Disabling TouchBoost" >> $DLL
	chmod 644 /sys/module/msm_performance/parameters/touchboost
	echo 0 > /sys/module/msm_performance/parameters/touchboost
fi

#I/0 Tweaks
if [ -e "/sys/block/sda/queue/read_ahead_kb" ]; then
	echo "*Applying I/O tweaks" >> $DLL
	Q_PATH=/sys/block/sda/queue/
	echo 1024 > $Q_PATH/read_ahead_kb
	if grep 'maple' $Q_PATH/scheduler; then
		echo "maple" > $Q_PATH/scheduler
		echo 14 > $Q_PATH/iosched/fifo_batch
		echo 4 > $Q_PATH/iosched/writes_starved
		echo 10 > $Q_PATH/iosched/sleep_latency_multiple
		echo 500 > $Q_PATH/iosched/async_read_expire
		echo 500 > $Q_PATH/iosched/async_write_expire
		echo 200 > $Q_PATH/iosched/sync_read_expire
		echo 200 > $Q_PATH/iosched/sync_write_expire
		echo 128 > $Q_PATH/nr_requests
		echo "	+Using maple with tuned values" >> $DLL
	elif grep 'cfq' $Q_PATH/scheduler; then
		echo "cfq" > $Q_PATH/scheduler
		echo 1 > $Q_PATH/iosched/back_seek_penalty
		echo 16384 > $Q_PATH/iosched/back_seek_max
		echo 120 > $Q_PATH/iosched/fifo_expire_sync
		echo 250 > $Q_PATH/iosched/fifo_expire_async
		echo 0 > $Q_PATH/iosched/slice_idle
		echo 8 > $Q_PATH/iosched/group_idle
		echo 1 > $Q_PATH/iosched/low_latency
		echo 10 > $Q_PATH/iosched/quantum
		echo 40 > $Q_PATH/iosched/slice_async
		echo 2 > $Q_PATH/iosched/slice_async_rq
		echo 100 > $Q_PATH/iosched/slice_sync
		echo 300 > $Q_PATH/iosched/target_latency
		echo "	+Using cfq with tuned values" >> $DLL
		elif grep 'noop' $Q_PATH/scheduler; then
		echo "noop" > $Q_PATH/scheduler
		echo "	+Using noop" >> $DLL
	else
		echo "	-Something went wrong while changing I/O Scheduler." >> $DLL
		echo "	-Error Code #03"
	fi
	echo 0 > $Q_PATH/add_random
	echo 0 > $Q_PATH/iostats
	echo 1 > $Q_PATH/nomerges
	echo 0 > $Q_PATH/rotational
	echo 1 > $Q_PATH/rq_affinity
fi

echo "	*Finished tuning I/O scheduler" >> $DLL

#TCP tweaks
echo "*Tuning TCP" >> $DLL
if grep 'westwood' /proc/sys/net/ipv4/tcp_available_congestion_control; then
	echo "	+Applying & tuning westwood" >> $DLL
	echo westwood > /proc/sys/net/ipv4/tcp_congestion_control
	echo 2 > /proc/sys/net/ipv4/tcp_ecn
	echo 1 > /proc/sys/net/ipv4/tcp_dsack
	echo 1 > /proc/sys/net/ipv4/tcp_low_latency
	echo 1 > /proc/sys/net/ipv4/tcp_timestamps
	echo 1 > /proc/sys/net/ipv4/tcp_sack
	echo 1 > /proc/sys/net/ipv4/tcp_window_scaling
	echo "	+Tuning finished for westwood" >> $DLL
elif grep 'cubic' /proc/sys/net/ipv4/tcp_available_congestion_control; then
	echo "	+Applying & tuning cubic" >> $DLL
	echo cubic > /proc/sys/net/ipv4/tcp_congestion_control
	echo 2 > /proc/sys/net/ipv4/tcp_ecn
	echo 1 > /proc/sys/net/ipv4/tcp_dsack
	echo 1 > /proc/sys/net/ipv4/tcp_low_latency
	echo 1 > /proc/sys/net/ipv4/tcp_timestamps
	echo 1 > /proc/sys/net/ipv4/tcp_sack
	echo 1 > /proc/sys/net/ipv4/tcp_window_scaling
	echo "	+Tuning finished for cubic" >> $DLL
fi

echo "	*Finished tuning TCP" >> $DLL

#Wakelocks
echo "*Blocking wakelocks" >> $DLL
if [ -e "/sys/module/bcmdhd/parameters/wlrx_divide" ]; then
	echo 10 > /sys/module/bcmdhd/parameters/wlrx_divide
fi
if [ -e "/sys/module/bcmdhd/parameters/wlctrl_divide" ]; then
	echo 10 > /sys/module/bcmdhd/parameters/wlctrl_divide
fi
if [ -e "/sys/module/wakeup/parameters/enable_bluetooth_timer" ]; then
	echo N > /sys/module/wakeup/parameters/enable_bluetooth_timer
fi
if [ -e "/sys/module/wakeup/parameters/enable_ipa_ws" ]; then 
	echo N > /sys/module/wakeup/parameters/enable_ipa_ws
fi
if [ -e "/sys/module/wakeup/parameters/enable_netlink_ws" ]; then
	echo N > /sys/module/wakeup/parameters/enable_netlink_ws
fi
if [ -e "/sys/module/wakeup/parameters/enable_netmgr_wl_ws" ]; then
	echo N > /sys/module/wakeup/parameters/enable_netmgr_wl_ws
fi
if [ -e "/sys/module/wakeup/parameters/enable_qcom_rx_wakelock_ws" ]; then 
	echo N > /sys/module/wakeup/parameters/enable_qcom_rx_wakelock_ws
fi
if [ -e "/sys/module/wakeup/parameters/enable_timerfd_ws" ]; then
	echo N > /sys/module/wakeup/parameters/enable_timerfd_ws
fi
if [ -e "/sys/module/wakeup/parameters/enable_wlan_extscan_wl_ws" ]; then 
	echo N > /sys/module/wakeup/parameters/enable_wlan_extscan_wl_ws
fi
if [ -e "/sys/module/wakeup/parameters/enable_wlan_wow_wl_ws" ]; then 
	echo N > /sys/module/wakeup/parameters/enable_wlan_wow_wl_ws
fi
if [ -e "/sys/module/wakeup/parameters/enable_wlan_ws" ]; then
	echo N > /sys/module/wakeup/parameters/enable_wlan_ws
fi
if [ -e "/sys/module/wakeup/parameters/enable_timerfd_ws" ]; then
	echo N > /sys/module/wakeup/parameters/enable_timerfd_ws
fi
if [ -e "/sys/module/wakeup/parameters/enable_netmgr_wl_ws" ]; then
	echo N > /sys/module/wakeup/parameters/enable_netmgr_wl_ws
fi
if [ -e "/sys/module/wakeup/parameters/enable_wlan_wow_wl_ws" ]; then
	echo N > /sys/module/wakeup/parameters/enable_wlan_wow_wl_ws
fi
if [ -e "/sys/module/wakeup/parameters/enable_wlan_ipa_ws" ]; then
	echo N > /sys/module/wakeup/parameters/enable_wlan_ipa_ws
fi
if [ -e "/sys/module/wakeup/parameters/enable_wlan_pno_wl_ws" ]; then
	echo N > /sys/module/wakeup/parameters/enable_wlan_pno_wl_ws
fi
if [ -e "/sys/module/wakeup/parameters/enable_wcnss_filter_lock_ws" ]; then
	echo N > /sys/module/wakeup/parameters/enable_wcnss_filter_lock_ws
fi

#Thermal
if [ -e "/sys/module/msm_thermal" ]; then
	echo "*Applying thermal module tweaks" >> $DLL
	echo 1 > /sys/module/msm_thermal/core_control/enabled
	echo 0 > /sys/module/msm_thermal/vdd_restriction/enabled
	echo N > /sys/module/msm_thermal/parameters/enabled
fi
if [ -e "/sys/kernel/msm_thermal/enabled" ]; then
	echo "*Applying thermal tweaks" >> $DLL
	chmod 644 /sys/kernel/msm_thermal/enabled
	echo 0 > /sys/kernel/msm_thermal/enabled
	chmod 444 /sys/kernel/msm_thermal/enabled
fi

# #GPU
# echo "msm-adreno-tz" > /sys/devices/soc/b00000.qcom,kgsl-3d0/devfreq/b00000.qcom,kgsl-3d0/governor
# GPU_FREQ=/sys/devices/soc/b00000.qcom,kgsl-3d0/devfreq/b00000.qcom,kgsl-3d0/max_freq	#652800000 is default
# av_freq=/sys/devices/soc/b00000.qcom,kgsl-3d0/devfreq/b00000.qcom,kgsl-3d0/available_frequencies
# if [ -e $GPU_FREQ ]; then
	# echo "*Applying GPU tweaks" >> $DLL
	# if grep '652800000' $av_freq; then
		# chmod 644 /sys/class/kgsl/kgsl-3d0/max_gpuclk
		# echo 652800000 > /sys/class/kgsl/kgsl-3d0/max_gpuclk
		# echo 652800000 > /sys/devices/soc/b00000.qcom,kgsl-3d0/devfreq/b00000.qcom,kgsl-3d0/max_freq
	# else
		# echo 624000000 > /sys/class/kgsl/kgsl-3d0/max_gpuclk
		# echo 624000000 > /sys/devices/soc/b00000.qcom,kgsl-3d0/devfreq/b00000.qcom,kgsl-3d0/max_freq
	# fi
	# chmod 644 /sys/devices/soc/b00000.qcom,kgsl-3d0/devfreq/b00000.qcom,kgsl-3d0/target_freq
	# echo 214000000 > /sys/devices/soc/b00000.qcom,kgsl-3d0/devfreq/b00000.qcom,kgsl-3d0/target_freq
	# echo 133000000 > /sys/devices/soc/b00000.qcom,kgsl-3d0/devfreq/b00000.qcom,kgsl-3d0/min_freq
	# if [ -e "/sys/devices/soc/b00000.qcom,kgsl-3d0/devfreq/b00000.qcom,kgsl-3d0/adrenoboost" ]; then
		# chmod 644 /sys/devices/soc/b00000.qcom,kgsl-3d0/devfreq/b00000.qcom,kgsl-3d0/adrenoboost
		# echo 1 > /sys/devices/soc/b00000.qcom,kgsl-3d0/devfreq/b00000.qcom,kgsl-3d0/adrenoboost
	# fi
	# echo "	+GPU tuned" >> $DLL
# fi

# echo "	*GPU tweaks finished" >> $DLL

echo "*Applying minor tweaks" >> $DLL

# #File system
# echo "	+File system tweaks" >> $DLL
# echo 10 > /proc/sys/fs/lease-break-time
# echo 32768 > /proc/sys/fs/inotify/max_queued_events
# echo 256 > /proc/sys/fs/inotify/max_user_instances
# echo 16384 > /proc/sys/fs/inotify/max_user_watches

#Virtual Memory
echo "	+Virtual memory tweaks" >> $DLL
echo 3000 > /proc/sys/vm/dirty_expire_centisecs
echo 5000 > /proc/sys/vm/dirty_writeback_centisecs
echo 1 > /proc/sys/vm/oom_kill_allocating_task
echo 2 > /proc/sys/vm/page-cluster
echo 60 > /proc/sys/vm/swappiness
echo 100 > /proc/sys/vm/vfs_cache_pressure
echo 20 > /proc/sys/vm/dirty_ratio
echo 5 > /proc/sys/vm/dirty_background_ratio
echo 0 > /proc/sys/vm/block_dump
echo 0 > /proc/sys/vm/overcommit_memory
echo 11096 > /proc/sys/vm/min_free_kbytes
echo 16 > /proc/sys/kernel/random/read_wakeup_threshold
echo 32 > /proc/sys/kernel/random/write_wakeup_threshold

#loop tweaks
echo "	+loop tweaks" >> $DLL
for i in /sys/block/loop*; do
   echo 0 > $i/queue/add_random
   echo 0 > $i/queue/iostats
   echo 1 > $i/queue/nomerges
   echo 0 > $i/queue/rotational
   echo 1 > $i/queue/rq_affinity
done

#ram tweaks
echo "	+ram tweaks" >> $DLL
for j in /sys/block/ram*; do
   echo 0 > $j/queue/add_random
   echo 0 > $j/queue/iostats
   echo 1 > $j/queue/nomerges
   echo 0 > $j/queue/rotational
   echo 1 > $j/queue/rq_affinity
done

echo "	*Minor tweaks applied" >> $DLL

echo "#####   COMPLETED    #####" >> $DLL

cdate=$(date)
echo "$cdate" >> $DLL
echo "" >> $DLL
echo "$codename $stype $version" >> $DLL
sleep 1
echo ------------------------------------------------------------
echo 'Soilwork Battery' Successfully Applied!
echo "Soilwork Battery" > /data/system/current_profile 
echo   You may now tweak them further
echo    using EXKM or Kernel Adiutor
echo ------------------------------------------------------------
echo ""
echo " Done, This will be automatically closed..."
sleep 4

#################################################
#Modded by Asiier
#Please say thanks and give proper credits if you're using this profile. 
#Credits
#*soniCron *Alcolawl *RogerF81 *Patalao *Mostafa Wael *Senthil360 and all of those that have share their profiles on Nexus 5X/6P Advanced Interactive Tweaks respective threads. 
